Python Features
    >simple and easy to learn
    >opensource
    >large community support
    >object oriented 
    >interpreted

Python Applications
    
    >Web applivcation development
    >datascience and analatics
    >ML and AI
    >desktop application
    >IOT

.py => python interpreter
>python --version
python location : where python
dynamically typed : num=8

Python variables

    def

        representing a memory location

    syntax 

        variable_name = value

python datatypes

    
    def 

        used for representing the value that variable can hold

    int,float,str,bool,None
    list,set,tuple,dict


python operators
    :are symbols used for perfoming various operaions

    Arithmetic operator: (+,-,*,/,%,//,**)

    Relational Operator:(<,>,<=,>=,==,!=) return bool

    Logical operator:(and,or,not)

    identity operator:(is)

    membership operator:(in)

    Assignment operator:(=,+=,-=,,,,,,)

Decision making

        if...else

        if...elif...else

        def:
            execute block of statments base on condition

        syntax:

            if condition1:
                    stmt1

            elif condtion2:
                    stmt2

            else:
                default stmt

looping stmts

        while,for

        def:
            iterate block of code repeated number of time

        
        syntax:

            initialization

            while condition:

                loop body

                incr/decr

            for i in range(0,10):

                print(i)

        break : exit from loop
        continue : skip current iteration

functions 

        def:
            block of stmts used to perform a specific task

        syntax

            def function_name(param1,parm2,,,,,):

                function body

                return value

            calling function 

            function_name(arg1,arg2,,,)

lambda function : 
    # def
        # single line anonymous function with one expression
    # syntax
        # lambda p1,p2:expression
Recursion
    #def
        # function itself
    # syntax   
        # def recursive_funstion(p):
            # base condition
            
            # recusive_function(p)

mutable and immutable



string 

    def : sequence of characters

    methods:


# Collections

list [] list() - can be updated

set - can be updated - all are unique

tuple (),tuple(),immutable

dict {key:value,key:value,key:value}

# slicing => extract part of a collection or sequence
    [start:stop:step]

# list comprehension easy way for creating list,set,dictionary from sequence

# nested collections
    => list of list
    => list of dictionary

# file I/Operator
    => red,write,append
    => open()

# Object oriented programming
    => definition
    => class
    => object
    => self
    => super()
    => __init__() => constructor
    => __str__() => string representation of object
    => Inheritance
        => Single Inheritance
        => Multilevel Inheritance
        => Multiple Inheritance
    => Polymorphism
        => method overloading => same method name different number of parameters
        => method overriding => Customize behaviour in child class without changing parent class.
                             => To provide specific implimentation of a method that is already defined in parent class.

        
        # Abstraction
            => hiding implimentation details
            => abc.py => ABC,@abstract_method

        # different type of methods
            =>Instance method (self)
            =>Class method (cls) @class_method
            =>Static method() @static method


# Variable length arguement method
    => *args, **kwargs
    => *args => non keyword arguement method receives any number of parms as tuple
    => **kwargs => keyword arguement method receives any number of params as dictionary

# Error Handling
    => 1.syntax error 2.runtime error (Exception)
    => runtime errors handle
        # try:doubt ful code
        # except: handling code
        # finally: clean up processing
        # raise: custom error throw
        # assert: debugging

#modules import
    # from......import
    # copy.py => copy(), deepcopy()
        #copy() => shallow copy => copies outer objects
        #deepcopy() => copies both outer and nested objects.

# __name__ == "__main__"

# decorators
    # decorators are function that changes the behaviour of another function without changing parent class.

# GIT and GITHUB
    => version control system
    => allows developers to track changes in code block.
    => git init => initilize git repository
    => git add -A => adding all changes to staging already
    => git commit -m "commit message" => staged files to local repository
    => git push -u name branch => local repository => remote repository
    => git status => list all untracked files.
    => git remote add name remote_path => remote repository local add
    => git remote -v => list all remote repository
    => git branch => list all branches.
    => git pull origin master => changes from remote repository

expenses_list=[12000,13000,14000,11000,12000,12000,13000,14000,11000]
<!--    -->       0    1     2    3     4

expense_dict ={"jan":12000,"feb":13000,"march":14000,"april":11000,"jan":1200}

<!-- april -->
